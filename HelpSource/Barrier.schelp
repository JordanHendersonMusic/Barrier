CLASS:: Barrier
summary:: A synchronisation barrier. Will wait until n number of threads have finished.
categories:: Scheduling


DESCRIPTION::
An synchronisation barrier.
Evaluates many threads in parralel, will wait for all to be finished.
Barriers are not reuseable.


SECTION:: Usage
There are two ways to use Barrier that can be understood by asking two questions,
do you want to compute a value or do something?
and do you have many functions, or one function you want to evaluate many times?


SUBSECTION:: With or without return value
By using 'collect', 'b.value' will become an array of 4 random numbers between 0 and 1.
code::
r = Routine.run {
	var b  = Barrier.collect(
		{ var v = 1.0.rand; v.wait; v},
		{ var v = 1.0.rand; v.wait; v},
		{ var v = 1.0.rand; v.wait; v},
		{ var v = 1.0.rand; v.wait; v}
	);
	\waiting.postln;
	b.value.postln;
	\done.postln;
}
::
Whereas, when using 'do', the output is ignored.
This particularly useful if you want to spawn a bunch of independed voices in polyphony and wait until all are finished.


code::
r = Routine.run {
	var b  = Barrier.do(
		{ var v = 1.0.rand; v.wait; v.postln},
		{ var v = 1.0.rand; v.wait; v.postln},
		{ var v = 1.0.rand; v.wait; v.postln},
		{ var v = 1.0.rand; v.wait; v.postln}
	);
	\waiting.postln;
	b.wait;
	\done.postln;
}
::


NOTE::
Please note, that 'collect' is followed by a call to '.value', and 'do' is followed by '.wait'.
::


SUBSECTION:: Single function, or repeat
Both 'collect' and 'do' can have variants called 'collectNTimes' and 'doNTimes'.
They repeat the given function 'N' times.

code::
r = Routine.run {
	var b  = Barrier.doNTimes(10,
		{ var v = 1.0.rand; v.wait; v.postln}
	);
	\waiting.postln;
	var b.wait;
	\done.postln;
};

r = Routine.run {
	var b = Barrier.collectNTimes(4,
		{ var v = 1.0.rand; v.wait; v}
	);
	\waiting.postln;
	b.value.postln;
	\done.postln;
};
::



CLASSMETHODS::


METHOD::do

argument:: ...seriesOfFuncs
A series of functions to run.
Ignores return value.
Functions are passed the thread number as the first argument.


METHOD::collect
argument:: ...seriesOfFuncs
A series of functions to run.
Each function's return value is added to an array, accessable with '.value'.
Functions are passed the thread number as the first argument.


METHOD::doNTimes
argument:: n
The number of times to duplicate the function.
argument:: function
A function to do evaluate n times, is passed n as an argument.
Return value is ignored.


METHOD::collectNTimes
argument:: n
The number of times to duplicate the function.
argument:: function
A function to do evaluate n times, is passed n as an argument.
Return value added to an array.


INSTANCEMETHODS::
METHOD:: wait
Waits for the threads to finish

METHOD:: value
Only works on a 'collect' Barrier. Will wait for the threads to finish and return the value.
If this isn't called in a thread, and the value has not been completed then an error will be thrown.
If the value has been completed, it will always return.


METHOD:: loopWhileExecuting
ARGUMENT:: func
discussion::
Loops the passed in function while the Barrier is still executing. Does so in a seperate thread so wait/value must still be called. Returns the Barrier.

'func' MUST return a number which will be the time between 'func' calls.
'func' is passed the number of times it has been run, and the Barrier as its arguments

NOTE::
If this function returns '0' repeatedly, the server and/or interpreter might crash.
::


METHOD:: isFinished
Returns a boolean.



EXAMPLES::
Below is an interactive example. Run it while reading the code and following the post window.
In short, the main voice plays 5 notes, then 10 other voices play while the main voice is quite,
then the main voice plays 5 more notes, then while 20 other voices play, the main voice also plays something.

code::
( // eval whole block - sound
s.waitForBoot {
	SynthDef(\bleep, {
		var env = Env.perc(\atk.kr(0.01), \rel.kr(1)).ar(doneAction: 2);
		var sig = SinOsc.ar(Vibrato.kr(\freq.kr(220), depth: 0.01, delay: \rel.kr / 3));
		var stereo = Pan2.ar(sig, Rand(-1.0, 1.0)) * env * \amp.kr(0.2);
		Out.ar(\out.kr(0), stereo);
	}).add;

	s.sync;

	Routine.run {
		var randMajorPitch = {|root|
			(Scale.major.semitones.choose + root).midicps
		};

		"staring main voice".warn;

		5.do{ |count|
			var delta = 3.0.rand + 0.1;

			"main voice".postln;
			Synth(\bleep, [\freq, randMajorPitch.(60), \rel, delta]);
			// wait less on last note
			if(count != 4, {delta.wait}, {(delta/4).wait});
		};

		"staring 10 other voices".warn;

		Barrier.doNTimes(10, { |n|
			5.do{ |count|
				var delta = 6.0.rand + 3;

				format("other voice %", n).postln;
				Synth(\bleep, [
					\freq, randMajorPitch.(55),
					\atk, delta/2,
					\rel, delta/2,
					\amp, 0.05
				]);
				// wait less on last note
				if(count != 4, {delta.wait}, {(delta/4).wait});
			}
		})
		.wait; // main voice (this thread) waits here.


		"staring main voice again".warn;


		5.do{ |count|
			var delta = 3.0.rand + 3;

			"main voice".postln;
			Synth(\bleep, [\freq, randMajorPitch.(65), \rel, delta * 3]);
			// wait less on last note
			if(count != 4, {delta.wait}, {(delta/4).wait});
		};



		"staring other voices again".warn;
		"but two other voices join, playing for as long as the barrier plays".warn;

		Barrier.doNTimes(20, { |n|
			25.do{ |count|
				var delta = 3.0.rand + 0.3;

				format("other voice: % count: %", n, count).postln;
				Synth(\bleep, [
					\freq, randMajorPitch.(63),
					\atk, delta/2,
					\rel, delta/2,
					\amp, 0.05
				]);

				delta.wait
			}
		})

		// runs for as long as the main barrier is processing, see help docs for note
		.loopWhileExecuting({
			var delta = 1.0.rand + 0.2;
			"high pitched voice".postln;
			Synth(\bleep, [
				\freq, randMajorPitch.(87),
				\atk, delta * 0.9,
				\rel, delta * 0.1,
				\amp, 0.2
			]);

			delta * (1 + 2.0.rand) // the wait time
		})

		.loopWhileExecuting({
			var delta = 3.0.rand + 1;
			"low thumps voice".postln;
			Synth(\bleep, [
				\freq, randMajorPitch.(40),
				\rel, delta / 10,
				\amp, 0.6
			]);

			delta // the wait time
		})

		.wait;

		"done".warn;
	}
};
)
::





